{"version":3,"sources":["../src/index.ts","../src/bn.ts","../src/convert.ts","../src/math.ts"],"sourcesContent":["export * from './convert';\nexport * from './types';\nexport * from './math';\nexport * from './bn';\n","import BnJs from 'bn.js';\n\ntype CompareResult = -1 | 0 | 1;\nexport type BNInput = number | string | number[] | Uint8Array | Buffer | BnJs;\ninterface BNHelper {\n  caller(v: BNInput, methodName: string): BN | boolean | CompareResult;\n  toHex: (bytesPadding?: number) => string;\n  toBytes: (bytesPadding?: number) => Uint8Array;\n  toJSON: () => string;\n}\ninterface BNInputOverrides {\n  add: (v: BNInput) => BN;\n  pow: (v: BNInput) => BN;\n  sub: (v: BNInput) => BN;\n  div: (v: BNInput) => BN;\n  mul: (v: BNInput) => BN;\n  mod: (v: BNInput) => BN;\n  divRound: (v: BNInput) => BN;\n  lt: (v: BNInput) => boolean;\n  lte: (v: BNInput) => boolean;\n  gt: (v: BNInput) => boolean;\n  gte: (v: BNInput) => boolean;\n  eq: (v: BNInput) => boolean;\n  cmp: (v: BNInput) => CompareResult;\n}\ninterface BNOverrides {\n  sqr: () => BN;\n  neg: () => BN;\n  abs: () => BN;\n  toTwos: (width: number) => BN;\n  fromTwos: (width: number) => BN;\n}\ninterface BNHiddenTypes {\n  mulTo: (num: BN, out: BN) => BN;\n  divmod: (num: BNInput, mode?: string, positive?: boolean) => { mod: BN; div: BN };\n}\ntype BNInputOverridesKeys = keyof BNInputOverrides;\n\nexport class BN extends BnJs implements BNInputOverrides, BNHiddenTypes, BNHelper, BNOverrides {\n  constructor(value: BNInput, base?: number | 'hex', endian?: BnJs.Endianness) {\n    if (BN.isBN(value)) {\n      super(value.toArray(), base, endian);\n      return;\n    }\n    // trim '0x' from hex strings as BN doesn't support it - https://github.com/ChainSafe/web3.js/issues/3847\n    if (typeof value === 'string' && value.slice(0, 2) === '0x') {\n      super(value.substring(2), base || 'hex', endian);\n      return;\n    }\n\n    super(value, base, endian);\n  }\n\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  toString(base?: number | 'hex', length?: number) {\n    const output = super.toString(base, length);\n\n    if (base === 16 || base === 'hex') return `0x${output}`;\n\n    return output;\n  }\n\n  toHex(bytesPadding?: number): string {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n\n    if (this.isNeg()) {\n      throw new Error('cannot convert negative value to hex');\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new Error(`value ${this} exceeds bytes ${bytesPadding}`);\n    }\n\n    return this.toString(16, bytesLength);\n  }\n\n  toBytes(bytesPadding?: number): Uint8Array {\n    if (this.isNeg()) {\n      throw new Error('cannot convert negative value to Bytes');\n    }\n\n    return Uint8Array.from(this.toArray(undefined, bytesPadding));\n  }\n\n  toJSON(): string {\n    return this.toString(16);\n  }\n  // END ANCHOR: HELPERS\n\n  // ANCHOR: OVERRIDES to accept better inputs\n  add(v: BNInput): BN {\n    return this.caller(v, 'add') as BN;\n  }\n\n  pow(v: BNInput): BN {\n    return this.caller(v, 'pow') as BN;\n  }\n\n  sub(v: BNInput): BN {\n    return this.caller(v, 'sub') as BN;\n  }\n\n  div(v: BNInput): BN {\n    return this.caller(v, 'div') as BN;\n  }\n\n  mul(v: BNInput): BN {\n    return this.caller(v, 'mul') as BN;\n  }\n\n  mod(v: BNInput): BN {\n    return this.caller(v, 'mod') as BN;\n  }\n\n  divRound(v: BNInput): BN {\n    return this.caller(v, 'divRound') as BN;\n  }\n\n  lt(v: BNInput): boolean {\n    return this.caller(v, 'lt') as boolean;\n  }\n\n  lte(v: BNInput): boolean {\n    return this.caller(v, 'lte') as boolean;\n  }\n\n  gt(v: BNInput): boolean {\n    return this.caller(v, 'gt') as boolean;\n  }\n\n  gte(v: BNInput): boolean {\n    return this.caller(v, 'gte') as boolean;\n  }\n\n  eq(v: BNInput): boolean {\n    return this.caller(v, 'eq') as boolean;\n  }\n\n  cmp(v: BNInput): CompareResult {\n    return this.caller(v, 'cmp') as CompareResult;\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n\n  // ANCHOR: OVERRIDES to output our BN type\n  sqr(): BN {\n    return new BN(super.sqr().toArray());\n  }\n\n  neg(): BN {\n    return new BN(super.neg().toArray());\n  }\n\n  abs(): BN {\n    return new BN(super.abs().toArray());\n  }\n\n  toTwos(width: number): BN {\n    return new BN(super.toTwos(width).toArray());\n  }\n\n  fromTwos(width: number): BN {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v: BNInput, methodName: BNInputOverridesKeys): BN | boolean | CompareResult {\n    const output = super[methodName](new BN(v));\n\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n\n    if (typeof output === 'boolean') {\n      return output as boolean;\n    }\n\n    return output as CompareResult;\n  }\n\n  clone() {\n    return new BN(this.toArray());\n  }\n\n  mulTo(num: BN, out: BN) {\n    const output: BnJs = (new BnJs(this.toArray()) as BN).mulTo(num, out);\n\n    return new BN(output.toArray());\n  }\n\n  egcd(p: BnJs) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray()),\n    };\n  }\n\n  divmod(num: BNInput, mode?: string, positive?: boolean): { mod: BN; div: BN } {\n    const { div, mod } = (new BnJs(this.toArray()) as BN).divmod(new BN(num), mode, positive);\n\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray()),\n    };\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n}\n\n// functional shortcut to create BN\nexport const bn = (value: BNInput, base?: number | 'hex', endian?: BnJs.Endianness) =>\n  new BN(value, base, endian);\n","/**\n * From: https://github.dev/ethers-io/ethers.js/blob/9ca3dc557de8d1556096ea4140316e7f7711a0f3/packages/math/src.ts/convert.ts\n */\n\nimport type { BNInput } from './bn';\nimport { bn } from './bn';\n\n// Shortcut to bn(value).toNumber\nexport function toNumber(value: BNInput): number {\n  return bn(value).toNumber();\n}\n\n// Shortcut to bn(value).toHex\nexport function toHex(value: BNInput, bytesPadding?: number): string {\n  return bn(value).toHex(bytesPadding);\n}\n\n// Shortcut to bn(value).toBytes\nexport function toBytes(value: BNInput, bytesPadding?: number): Uint8Array {\n  return bn(value).toBytes(bytesPadding);\n}\n","import type { BN } from './bn';\nimport { bn } from './bn';\nimport type { BigNumberish } from './types';\n\nexport function max(...numbers: Array<BigNumberish>): BN {\n  return numbers.reduce<BN>((prev, cur) => (bn(cur).gt(prev) ? bn(cur) : prev), bn(0));\n}\n\nexport function multiply(...numbers: Array<BigNumberish>): BN {\n  return bn(Math.ceil(numbers.reduce<BN>((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n"],"mappings":"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","names":["src_exports","__export","BN","bn","max","multiply","toBytes","toHex","toNumber","__toCommonJS","import_bn","BN","BnJs","value","base","endian","length","output","bytesPadding","bytesLength","v","width","methodName","num","out","p","a","b","gcd","mode","positive","div","mod","bn","toNumber","value","bn","toHex","bytesPadding","toBytes","max","numbers","prev","cur","bn","multiply","a","b"]}