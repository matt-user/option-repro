var P=(i=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(i,{get:(c,t)=>(typeof require!="undefined"?require:c)[t]}):i)(function(i){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var A=(i,c)=>()=>(i&&(c=i(i=0)),c);var n=A(()=>{});n();n();n();n();n();import{arrayify as M}from"@ethersproject/bytes";n();var h,v="Node";typeof globalThis<"u"&&globalThis.crypto&&(h=globalThis.crypto,v="Web");if(!h&&typeof P=="function")try{h=P("crypto"),v="Node"}catch(i){console.error("keystore expects a standard Web browser or Node environment.",i)}var y=h,T=v;n();var l=i=>T==="Node"?y.randomBytes(i):y.getRandomValues(new Uint8Array(i));n();import{coinQuantityfy as U,ScriptTransactionRequest as D}from"@fuel-ts/providers";n();import{NativeAssetId as g}from"@fuel-ts/constants";import{hashMessage as N,hashTransaction as W}from"@fuel-ts/hasher";import{HDWallet as w}from"@fuel-ts/hdwallet";import{AbstractWallet as K}from"@fuel-ts/interfaces";import{Mnemonic as q}from"@fuel-ts/mnemonic";import{ScriptTransactionRequest as S,transactionRequestify as b,Provider as E}from"@fuel-ts/providers";import{Signer as C}from"@fuel-ts/signer";import{MAX_GAS_PER_TX as x}from"@fuel-ts/transactions";var F="http://127.0.0.1:4000/graphql",u=class extends K{constructor(t,e=F){super();let r=new C(t);this.signer=()=>r,this.provider=this.connect(e)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(t){if(t)typeof t=="string"?this.provider=new E(t):this.provider=t;else throw new Error("Provider is required");return this.provider}signMessage(t){return this.signer().sign(N(t))}signTransaction(t){let e=b(t),r=W(e);return this.signer().sign(r)}populateTransactionWitnessesSignature(t){let e=b(t),r=e.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let s=this.signTransaction(e);e.updateWitness(r,s)}return e}async getCoinsToSpend(t,e,r){return this.provider.getCoinsToSpend(this.address,t,e,r)}async getCoins(){let t=[],r;for(;;){let s=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(t.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return t}async getBalance(t=g){return await this.provider.getBalance(this.address,t)}async getBalances(){let t=[],r;for(;;){let s=await this.provider.getBalances(this.address,{first:9999,after:r});if(t.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return t}async fund(t){let e=t.calculateFee(),r=await this.getCoinsToSpend([e]);t.addCoins(r)}async transfer(t,e,r=g,s={}){let a={gasLimit:x,...s},o=new S(a);o.addCoinOutput(t,e,r);let f=await this.getCoinsToSpend([[e,r],o.calculateFee()]);return o.addCoins(f),this.sendTransaction(o)}async sendTransaction(t){let e=b(t);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(e))}async simulateTransaction(t){let e=b(t);return this.provider.call(this.populateTransactionWitnessesSignature(e),{utxoValidation:!0})}async buildPredicateTransaction(t,e,r=g,s){let a={fundTransaction:!0,...s},o=new S({gasLimit:x,...a});o.addCoinOutput(t,e,r);let f=[];if(a.fundTransaction&&f.push(o.calculateFee()),f.length){let R=await this.getCoinsToSpend(f);o.addCoins(R)}return o}async submitPredicate(t,e,r=g,s){let a=await this.buildPredicateTransaction(t,e,r,s);return(await this.sendTransaction(a)).waitForResult()}async submitSpendPredicate(t,e,r,s=g,a){return this.provider.submitSpendPredicate(t,e,this.address,r,s,a)}static generate(t){let e=C.generatePrivateKey(t==null?void 0:t.entropy);return new u(e,t==null?void 0:t.provider)}static fromSeed(t,e){let s=w.fromSeed(t).derivePath(e||u.defaultPath);return new u(s.privateKey)}static fromMnemonic(t,e,r){let s=q.mnemonicToSeed(t,r),o=w.fromSeed(s).derivePath(e||u.defaultPath);return new u(o.privateKey)}static fromExtendedKey(t){let e=w.fromExtendedKey(t);return new u(e.privateKey)}},m=u;m.defaultPath="m/44'/1179993420'/0'/0/0";var I=async(i,c)=>{let t=new m(process.env.GENESIS_SECRET||l(32),i.provider),e=await t.getCoinsToSpend(c),r=new D({gasLimit:1e4,gasPrice:1});r.addCoins(e),c.map(U).forEach(({amount:a,assetId:o})=>r.addCoinOutput(i.address,a,o)),await(await t.sendTransaction(r)).wait()},Rt=async(i,c)=>{let t=m.generate({provider:i});return c&&await I(t,c),t};export{Rt as generateTestWallet,I as seedWallet};
//# sourceMappingURL=test-utils.mjs.map