"use strict";var P=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var K=Object.prototype.hasOwnProperty;var q=(s,i)=>()=>(s&&(i=s(s=0)),i);var U=(s,i)=>{for(var t in i)P(s,t,{get:i[t],enumerable:!0})},E=(s,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let r of W(i))!K.call(s,r)&&r!==t&&P(s,r,{get:()=>i[r],enumerable:!(e=N(i,r))||e.enumerable});return s};var F=s=>E(P({},"__esModule",{value:!0}),s);var o=q(()=>{});var O={};U(O,{generateTestWallet:()=>M,seedWallet:()=>L});module.exports=F(O);o();o();o();o();o();var I=require("@ethersproject/bytes");o();var h,B="Node";typeof globalThis<"u"&&globalThis.crypto&&(h=globalThis.crypto,B="Web");if(!h&&typeof require=="function")try{h=require("crypto"),B="Node"}catch(s){console.error("keystore expects a standard Web browser or Node environment.",s)}var l=h,T=B;o();var g=s=>T==="Node"?l.randomBytes(s):l.getRandomValues(new Uint8Array(s));o();var v=require("@fuel-ts/providers");o();var f=require("@fuel-ts/constants"),w=require("@fuel-ts/hasher"),b=require("@fuel-ts/hdwallet"),R=require("@fuel-ts/interfaces"),A=require("@fuel-ts/mnemonic"),p=require("@fuel-ts/providers"),S=require("@fuel-ts/signer"),C=require("@fuel-ts/transactions"),D="http://127.0.0.1:4000/graphql",u=class extends R.AbstractWallet{constructor(t,e=D){super();let r=new S.Signer(t);this.signer=()=>r,this.provider=this.connect(e)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(t){if(t)typeof t=="string"?this.provider=new p.Provider(t):this.provider=t;else throw new Error("Provider is required");return this.provider}signMessage(t){return this.signer().sign((0,w.hashMessage)(t))}signTransaction(t){let e=(0,p.transactionRequestify)(t),r=(0,w.hashTransaction)(e);return this.signer().sign(r)}populateTransactionWitnessesSignature(t){let e=(0,p.transactionRequestify)(t),r=e.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let n=this.signTransaction(e);e.updateWitness(r,n)}return e}async getCoinsToSpend(t,e,r){return this.provider.getCoinsToSpend(this.address,t,e,r)}async getCoins(){let t=[],r;for(;;){let n=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(t.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return t}async getBalance(t=f.NativeAssetId){return await this.provider.getBalance(this.address,t)}async getBalances(){let t=[],r;for(;;){let n=await this.provider.getBalances(this.address,{first:9999,after:r});if(t.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return t}async fund(t){let e=t.calculateFee(),r=await this.getCoinsToSpend([e]);t.addCoins(r)}async transfer(t,e,r=f.NativeAssetId,n={}){let c={gasLimit:C.MAX_GAS_PER_TX,...n},a=new p.ScriptTransactionRequest(c);a.addCoinOutput(t,e,r);let y=await this.getCoinsToSpend([[e,r],a.calculateFee()]);return a.addCoins(y),this.sendTransaction(a)}async sendTransaction(t){let e=(0,p.transactionRequestify)(t);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(e))}async simulateTransaction(t){let e=(0,p.transactionRequestify)(t);return this.provider.call(this.populateTransactionWitnessesSignature(e),{utxoValidation:!0})}async buildPredicateTransaction(t,e,r=f.NativeAssetId,n){let c={fundTransaction:!0,...n},a=new p.ScriptTransactionRequest({gasLimit:C.MAX_GAS_PER_TX,...c});a.addCoinOutput(t,e,r);let y=[];if(c.fundTransaction&&y.push(a.calculateFee()),y.length){let k=await this.getCoinsToSpend(y);a.addCoins(k)}return a}async submitPredicate(t,e,r=f.NativeAssetId,n){let c=await this.buildPredicateTransaction(t,e,r,n);return(await this.sendTransaction(c)).waitForResult()}async submitSpendPredicate(t,e,r,n=f.NativeAssetId,c){return this.provider.submitSpendPredicate(t,e,this.address,r,n,c)}static generate(t){let e=S.Signer.generatePrivateKey(t==null?void 0:t.entropy);return new u(e,t==null?void 0:t.provider)}static fromSeed(t,e){let n=b.HDWallet.fromSeed(t).derivePath(e||u.defaultPath);return new u(n.privateKey)}static fromMnemonic(t,e,r){let n=A.Mnemonic.mnemonicToSeed(t,r),a=b.HDWallet.fromSeed(n).derivePath(e||u.defaultPath);return new u(a.privateKey)}static fromExtendedKey(t){let e=b.HDWallet.fromExtendedKey(t);return new u(e.privateKey)}},m=u;m.defaultPath="m/44'/1179993420'/0'/0/0";var L=async(s,i)=>{let t=new m(process.env.GENESIS_SECRET||g(32),s.provider),e=await t.getCoinsToSpend(i),r=new v.ScriptTransactionRequest({gasLimit:1e4,gasPrice:1});r.addCoins(e),i.map(v.coinQuantityfy).forEach(({amount:c,assetId:a})=>r.addCoinOutput(s.address,c,a)),await(await t.sendTransaction(r)).wait()},M=async(s,i)=>{let t=m.generate({provider:s});return i&&await L(t,i),t};0&&(module.exports={generateTestWallet,seedWallet});
//# sourceMappingURL=test-utils.js.map