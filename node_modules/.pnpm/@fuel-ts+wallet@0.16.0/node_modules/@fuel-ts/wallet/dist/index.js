"use strict";var P=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var E=(s,o)=>()=>(s&&(o=s(s=0)),o);var R=(s,o)=>{for(var t in o)P(s,t,{get:o[t],enumerable:!0})},F=(s,o,t,e)=>{if(o&&typeof o=="object"||typeof o=="function")for(let r of q(o))!U.call(s,r)&&r!==t&&P(s,r,{get:()=>o[r],enumerable:!(e=K(o,r))||e.enumerable});return s};var I=s=>F(P({},"__esModule",{value:!0}),s);var i=E(()=>{});var G={};R(G,{TestUtils:()=>x,Wallet:()=>d});module.exports=I(G);i();i();var f=require("@fuel-ts/constants"),T=require("@fuel-ts/hasher"),h=require("@fuel-ts/hdwallet"),A=require("@fuel-ts/interfaces"),L=require("@fuel-ts/mnemonic"),p=require("@fuel-ts/providers"),B=require("@fuel-ts/signer"),S=require("@fuel-ts/transactions"),Q="http://127.0.0.1:4000/graphql",m=class extends A.AbstractWallet{constructor(t,e=Q){super();let r=new B.Signer(t);this.signer=()=>r,this.provider=this.connect(e)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(t){if(t)typeof t=="string"?this.provider=new p.Provider(t):this.provider=t;else throw new Error("Provider is required");return this.provider}signMessage(t){return this.signer().sign((0,T.hashMessage)(t))}signTransaction(t){let e=(0,p.transactionRequestify)(t),r=(0,T.hashTransaction)(e);return this.signer().sign(r)}populateTransactionWitnessesSignature(t){let e=(0,p.transactionRequestify)(t),r=e.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let n=this.signTransaction(e);e.updateWitness(r,n)}return e}async getCoinsToSpend(t,e,r){return this.provider.getCoinsToSpend(this.address,t,e,r)}async getCoins(){let t=[],r;for(;;){let n=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(t.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return t}async getBalance(t=f.NativeAssetId){return await this.provider.getBalance(this.address,t)}async getBalances(){let t=[],r;for(;;){let n=await this.provider.getBalances(this.address,{first:9999,after:r});if(t.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return t}async fund(t){let e=t.calculateFee(),r=await this.getCoinsToSpend([e]);t.addCoins(r)}async transfer(t,e,r=f.NativeAssetId,n={}){let c={gasLimit:S.MAX_GAS_PER_TX,...n},a=new p.ScriptTransactionRequest(c);a.addCoinOutput(t,e,r);let y=await this.getCoinsToSpend([[e,r],a.calculateFee()]);return a.addCoins(y),this.sendTransaction(a)}async sendTransaction(t){let e=(0,p.transactionRequestify)(t);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(e))}async simulateTransaction(t){let e=(0,p.transactionRequestify)(t);return this.provider.call(this.populateTransactionWitnessesSignature(e),{utxoValidation:!0})}async buildPredicateTransaction(t,e,r=f.NativeAssetId,n){let c={fundTransaction:!0,...n},a=new p.ScriptTransactionRequest({gasLimit:S.MAX_GAS_PER_TX,...c});a.addCoinOutput(t,e,r);let y=[];if(c.fundTransaction&&y.push(a.calculateFee()),y.length){let W=await this.getCoinsToSpend(y);a.addCoins(W)}return a}async submitPredicate(t,e,r=f.NativeAssetId,n){let c=await this.buildPredicateTransaction(t,e,r,n);return(await this.sendTransaction(c)).waitForResult()}async submitSpendPredicate(t,e,r,n=f.NativeAssetId,c){return this.provider.submitSpendPredicate(t,e,this.address,r,n,c)}static generate(t){let e=B.Signer.generatePrivateKey(t==null?void 0:t.entropy);return new m(e,t==null?void 0:t.provider)}static fromSeed(t,e){let n=h.HDWallet.fromSeed(t).derivePath(e||m.defaultPath);return new m(n.privateKey)}static fromMnemonic(t,e,r){let n=L.Mnemonic.mnemonicToSeed(t,r),a=h.HDWallet.fromSeed(n).derivePath(e||m.defaultPath);return new m(a.privateKey)}static fromExtendedKey(t){let e=h.HDWallet.fromExtendedKey(t);return new m(e.privateKey)}},d=m;d.defaultPath="m/44'/1179993420'/0'/0/0";var x={};R(x,{generateTestWallet:()=>O,seedWallet:()=>N});i();i();i();i();i();var z=require("@ethersproject/bytes");i();var b,C="Node";typeof globalThis<"u"&&globalThis.crypto&&(b=globalThis.crypto,C="Web");if(!b&&typeof require=="function")try{b=require("crypto"),C="Node"}catch(s){console.error("keystore expects a standard Web browser or Node environment.",s)}var l=b,w=C;i();var g=s=>w==="Node"?l.randomBytes(s):l.getRandomValues(new Uint8Array(s));i();var v=require("@fuel-ts/providers");var N=async(s,o)=>{let t=new d(process.env.GENESIS_SECRET||g(32),s.provider),e=await t.getCoinsToSpend(o),r=new v.ScriptTransactionRequest({gasLimit:1e4,gasPrice:1});r.addCoins(e),o.map(v.coinQuantityfy).forEach(({amount:c,assetId:a})=>r.addCoinOutput(s.address,c,a)),await(await t.sendTransaction(r)).wait()},O=async(s,o)=>{let t=d.generate({provider:s});return o&&await N(t,o),t};0&&(module.exports={TestUtils,Wallet});
//# sourceMappingURL=index.js.map