"use strict";var _=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var q=(a,e)=>{for(var t in e)_(a,t,{get:e[t],enumerable:!0})},G=(a,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of C(e))!D.call(a,n)&&n!==t&&_(a,n,{get:()=>e[n],enumerable:!(s=z(e,n))||s.enumerable});return a};var Y=a=>G(_({},"__esModule",{value:!0}),a);var K=(a,e,t)=>{if(!e.has(a))throw TypeError("Cannot "+t)};var r=(a,e,t)=>(K(a,e,"read from private field"),t?t.call(a):e.get(a)),c=(a,e,t)=>{if(e.has(a))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(a):e.set(a,t)},o=(a,e,t,s)=>(K(a,e,"write to private field"),s?s.call(a,t):e.set(a,t),t);var P=(a,e,t)=>(K(a,e,"access private method"),t);var $={};q($,{WalletManager:()=>w});module.exports=Y($);var S=require("@fuel-ts/keystore"),x=require("events");var k=class{constructor(){this.storage=new Map}async getItem(e){return this.storage.get(e)}async setItem(e,t){return this.storage.set(e,t)}async removeItem(e){this.storage.delete(e)}async clear(){return this.storage.clear()}},W=k;var M=require("@fuel-ts/mnemonic"),g=require("@fuel-ts/wallet");var d,A=class{constructor(e){c(this,d,void 0);this.pathKey="{}";this.rootPath=`m/44'/1179993420'/${this.pathKey}'/0/0`;this.numberOfAccounts=0;o(this,d,e.secret||M.Mnemonic.generate()),this.rootPath=e.rootPath||this.rootPath,this.numberOfAccounts=e.numberOfAccounts||1}getDerivePath(e){return this.rootPath.includes(this.pathKey)?this.rootPath.replace(this.pathKey,String(e)):`${this.rootPath}/${e}`}serialize(){return{secret:r(this,d),rootPath:this.rootPath,numberOfAccounts:this.numberOfAccounts}}getAccounts(){let e=[],t=0;do{let s=g.Wallet.fromMnemonic(r(this,d),this.getDerivePath(t));e.push({publicKey:s.publicKey,address:s.address}),t+=1}while(t<this.numberOfAccounts);return e}addAccount(){this.numberOfAccounts+=1;let e=g.Wallet.fromMnemonic(r(this,d),this.getDerivePath(this.numberOfAccounts));return{publicKey:e.publicKey,address:e.address}}exportAccount(e){let t=0;do{let s=g.Wallet.fromMnemonic(r(this,d),this.getDerivePath(t));if(s.address.equals(e))return s.privateKey;t+=1}while(t<this.numberOfAccounts);throw new Error("Account not found")}getWallet(e){let t=this.exportAccount(e);return new g.Wallet(t)}};d=new WeakMap,A.type="mnemonic";var f=require("@fuel-ts/wallet");var u,v=class{constructor(e){c(this,u,[]);e.secret?o(this,u,[e.secret]):o(this,u,e.accounts||[f.Wallet.generate().privateKey])}serialize(){return{accounts:r(this,u)}}getPublicAccount(e){let t=new f.Wallet(e);return{address:t.address,publicKey:t.publicKey}}getAccounts(){return r(this,u).map(this.getPublicAccount)}addAccount(){let e=f.Wallet.generate();return r(this,u).push(e.privateKey),this.getPublicAccount(e.privateKey)}exportAccount(e){let t=r(this,u).find(s=>new f.Wallet(s).address.equals(e));if(!t)throw new Error("Address not found");return t}getWallet(e){let t=this.exportAccount(e);return new f.Wallet(t)}};u=new WeakMap,v.type="privateKey";var p={invalid_vault_type:"Invalid VaultType",address_not_found:"Address not found",vault_not_found:"Vault not found",wallet_not_unlocked:"Wallet is locked",passphrase_not_match:"Passphrase didn't match"};function m(a,e){if(!a)throw new Error(e)}var i,y,l,V,I,O,R,E=class extends x.EventEmitter{constructor(t){super();c(this,V);c(this,O);this.storage=new W;this.STORAGE_KEY="WalletManager";c(this,i,[]);c(this,y,"");c(this,l,!0);this.storage=(t==null?void 0:t.storage)||this.storage}get isLocked(){return r(this,l)}getVaults(){return r(this,i).map((t,s)=>({title:t.title,type:t.type,vaultId:s}))}getAccounts(){return r(this,i).flatMap((t,s)=>t.vault.getAccounts().map(n=>({...n,vaultId:s})))}getWallet(t){let s=r(this,i).find(n=>n.vault.getAccounts().find(h=>h.address.equals(t)));return m(s,p.address_not_found),s.vault.getWallet(t)}exportPrivateKey(t){m(!r(this,l),p.wallet_not_unlocked);let s=r(this,i).find(n=>n.vault.getAccounts().find(h=>h.address.equals(t)));return m(s,p.address_not_found),s.vault.exportAccount(t)}async addAccount(t){await this.loadState();let s=r(this,i)[(t==null?void 0:t.vaultId)||0];await m(s,p.vault_not_found),s.vault.addAccount(),await this.saveState()}async removeVault(t){r(this,i).splice(t,1),await this.saveState()}async addVault(t){await this.loadState();let s=this.getVaultClass(t.type),n=new s(t);o(this,i,r(this,i).concat({title:t.title,type:t.type,vault:n})),await this.saveState()}async lock(){o(this,l,!0),o(this,i,[]),o(this,y,""),this.emit("lock")}async unlock(t){o(this,y,t),o(this,l,!1),await this.loadState(),this.emit("unlock")}async loadState(){await m(!r(this,l),p.wallet_not_unlocked);let t=await this.storage.getItem(this.STORAGE_KEY);if(t){let s=await(0,S.decrypt)(r(this,y),JSON.parse(t));o(this,i,P(this,O,R).call(this,s.vaults))}}async saveState(){await m(!r(this,l),p.wallet_not_unlocked);let t=await(0,S.encrypt)(r(this,y),{vaults:P(this,V,I).call(this,r(this,i))});this.storage.setItem(this.STORAGE_KEY,JSON.stringify(t)),this.emit("update")}getVaultClass(t){let s=E.Vaults.find(n=>n.type===t);return m(s,p.invalid_vault_type),s}},w=E;i=new WeakMap,y=new WeakMap,l=new WeakMap,V=new WeakSet,I=function(t){return t.map(({title:s,type:n,vault:h})=>({title:s,type:n,data:h.serialize()}))},O=new WeakSet,R=function(t){return t.map(({title:s,type:n,data:h})=>{let T=this.getVaultClass(n);return{title:s,type:n,vault:new T(h)}})},w.Vaults=[A,v];0&&(module.exports={WalletManager});
//# sourceMappingURL=index.js.map