var S=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var a=(r,e,t)=>(S(r,e,"read from private field"),t?t.call(r):e.get(r)),c=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)},o=(r,e,t,s)=>(S(r,e,"write to private field"),s?s.call(r,t):e.set(r,t),t);var _=(r,e,t)=>(S(r,e,"access private method"),t);import{encrypt as R,decrypt as T}from"@fuel-ts/keystore";import{EventEmitter as z}from"events";var K=class{constructor(){this.storage=new Map}async getItem(e){return this.storage.get(e)}async setItem(e,t){return this.storage.set(e,t)}async removeItem(e){this.storage.delete(e)}async clear(){return this.storage.clear()}},E=K;import{Mnemonic as I}from"@fuel-ts/mnemonic";import{Wallet as w}from"@fuel-ts/wallet";var d,f=class{constructor(e){c(this,d,void 0);this.pathKey="{}";this.rootPath=`m/44'/1179993420'/${this.pathKey}'/0/0`;this.numberOfAccounts=0;o(this,d,e.secret||I.generate()),this.rootPath=e.rootPath||this.rootPath,this.numberOfAccounts=e.numberOfAccounts||1}getDerivePath(e){return this.rootPath.includes(this.pathKey)?this.rootPath.replace(this.pathKey,String(e)):`${this.rootPath}/${e}`}serialize(){return{secret:a(this,d),rootPath:this.rootPath,numberOfAccounts:this.numberOfAccounts}}getAccounts(){let e=[],t=0;do{let s=w.fromMnemonic(a(this,d),this.getDerivePath(t));e.push({publicKey:s.publicKey,address:s.address}),t+=1}while(t<this.numberOfAccounts);return e}addAccount(){this.numberOfAccounts+=1;let e=w.fromMnemonic(a(this,d),this.getDerivePath(this.numberOfAccounts));return{publicKey:e.publicKey,address:e.address}}exportAccount(e){let t=0;do{let s=w.fromMnemonic(a(this,d),this.getDerivePath(t));if(s.address.equals(e))return s.privateKey;t+=1}while(t<this.numberOfAccounts);throw new Error("Account not found")}getWallet(e){let t=this.exportAccount(e);return new w(t)}};d=new WeakMap,f.type="mnemonic";import{Wallet as g}from"@fuel-ts/wallet";var u,A=class{constructor(e){c(this,u,[]);e.secret?o(this,u,[e.secret]):o(this,u,e.accounts||[g.generate().privateKey])}serialize(){return{accounts:a(this,u)}}getPublicAccount(e){let t=new g(e);return{address:t.address,publicKey:t.publicKey}}getAccounts(){return a(this,u).map(this.getPublicAccount)}addAccount(){let e=g.generate();return a(this,u).push(e.privateKey),this.getPublicAccount(e.privateKey)}exportAccount(e){let t=a(this,u).find(s=>new g(s).address.equals(e));if(!t)throw new Error("Address not found");return t}getWallet(e){let t=this.exportAccount(e);return new g(t)}};u=new WeakMap,A.type="privateKey";var p={invalid_vault_type:"Invalid VaultType",address_not_found:"Address not found",vault_not_found:"Vault not found",wallet_not_unlocked:"Wallet is locked",passphrase_not_match:"Passphrase didn't match"};function m(r,e){if(!r)throw new Error(e)}var i,y,l,V,W,O,M,k=class extends z{constructor(t){super();c(this,V);c(this,O);this.storage=new E;this.STORAGE_KEY="WalletManager";c(this,i,[]);c(this,y,"");c(this,l,!0);this.storage=(t==null?void 0:t.storage)||this.storage}get isLocked(){return a(this,l)}getVaults(){return a(this,i).map((t,s)=>({title:t.title,type:t.type,vaultId:s}))}getAccounts(){return a(this,i).flatMap((t,s)=>t.vault.getAccounts().map(n=>({...n,vaultId:s})))}getWallet(t){let s=a(this,i).find(n=>n.vault.getAccounts().find(h=>h.address.equals(t)));return m(s,p.address_not_found),s.vault.getWallet(t)}exportPrivateKey(t){m(!a(this,l),p.wallet_not_unlocked);let s=a(this,i).find(n=>n.vault.getAccounts().find(h=>h.address.equals(t)));return m(s,p.address_not_found),s.vault.exportAccount(t)}async addAccount(t){await this.loadState();let s=a(this,i)[(t==null?void 0:t.vaultId)||0];await m(s,p.vault_not_found),s.vault.addAccount(),await this.saveState()}async removeVault(t){a(this,i).splice(t,1),await this.saveState()}async addVault(t){await this.loadState();let s=this.getVaultClass(t.type),n=new s(t);o(this,i,a(this,i).concat({title:t.title,type:t.type,vault:n})),await this.saveState()}async lock(){o(this,l,!0),o(this,i,[]),o(this,y,""),this.emit("lock")}async unlock(t){o(this,y,t),o(this,l,!1),await this.loadState(),this.emit("unlock")}async loadState(){await m(!a(this,l),p.wallet_not_unlocked);let t=await this.storage.getItem(this.STORAGE_KEY);if(t){let s=await T(a(this,y),JSON.parse(t));o(this,i,_(this,O,M).call(this,s.vaults))}}async saveState(){await m(!a(this,l),p.wallet_not_unlocked);let t=await R(a(this,y),{vaults:_(this,V,W).call(this,a(this,i))});this.storage.setItem(this.STORAGE_KEY,JSON.stringify(t)),this.emit("update")}getVaultClass(t){let s=k.Vaults.find(n=>n.type===t);return m(s,p.invalid_vault_type),s}},P=k;i=new WeakMap,y=new WeakMap,l=new WeakMap,V=new WeakSet,W=function(t){return t.map(({title:s,type:n,vault:h})=>({title:s,type:n,data:h.serialize()}))},O=new WeakSet,M=function(t){return t.map(({title:s,type:n,data:h})=>{let x=this.getVaultClass(n);return{title:s,type:n,vault:new x(h)}})},P.Vaults=[f,A];export{P as WalletManager};
//# sourceMappingURL=index.mjs.map